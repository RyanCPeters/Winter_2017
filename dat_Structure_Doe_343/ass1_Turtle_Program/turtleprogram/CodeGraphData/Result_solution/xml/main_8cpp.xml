<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="main_8cpp" kind="file">
    <compoundname>main.cpp</compoundname>
    <includes refid="turtleprogram_8h" local="yes">turtleprogram.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="3">
        <label>string</label>
      </node>
      <node id="1">
        <label>turtleprogram.h</label>
        <link refid="turtleprogram_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>C:/Users/Peter/GitHub_remotes/Winter_UWB_2017/css_343/ass1_Turtle_Program/turtleprogram/turtleprogram/main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iosfwd</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Peter/GitHub_remotes/Winter_UWB_2017/css_343/ass1_Turtle_Program/turtleprogram/turtleprogram/main.cpp" line="6" column="1" bodyfile="C:/Users/Peter/GitHub_remotes/Winter_UWB_2017/css_343/ass1_Turtle_Program/turtleprogram/turtleprogram/main.cpp" bodystart="6" bodyend="31"/>
        <references refid="class_turtle_program_1aedf345ee7c721ade3968fb19871ced58" compoundref="turtleprogram_8cpp" startline="141" endline="144">TurtleProgram::getIndex</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="turtleprogram_8h" kindref="compound">turtleprogram.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turtle_program" kindref="compound">TurtleProgram</ref><sp/>tp1;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp1:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turtle_program" kindref="compound">TurtleProgram</ref><sp/>tp2(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp2:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turtle_program" kindref="compound">TurtleProgram</ref><sp/>tp3(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;90&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>tp1<sp/>=<sp/>tp2<sp/>+<sp/>tp3;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp1<sp/>now<sp/>as<sp/>tp2+tp3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>tp1<sp/>=<sp/>tp2<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp1<sp/>now<sp/>as<sp/>tp2<sp/>*<sp/>3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turtle_program" kindref="compound">TurtleProgram</ref><sp/>tp4(tp1);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp4<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>tp1:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp4<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turtle_program" kindref="compound">TurtleProgram</ref><sp/>tp5(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp5:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp5<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>boolalpha;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp2<sp/>and<sp/>tp5<sp/>are<sp/>==<sp/>to<sp/>each<sp/>other:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(tp2<sp/>==<sp/>tp5)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp2<sp/>and<sp/>tp3<sp/>are<sp/>!=<sp/>to<sp/>each<sp/>other:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(tp2<sp/>!=<sp/>tp3)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>0<sp/>of<sp/>tp2<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp2.<ref refid="class_turtle_program_1aedf345ee7c721ade3968fb19871ced58" kindref="member">getIndex</ref>(0)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>tp2.setIndex(0,<sp/></highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>tp2.setIndex(1,<sp/></highlight><highlight class="stringliteral">&quot;90&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp2<sp/>after<sp/>2<sp/>calls<sp/>to<sp/>setIndex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tp2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tp2<sp/>and<sp/>tp3<sp/>are<sp/>==<sp/>to<sp/>each<sp/>other:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(tp2<sp/>==<sp/>tp3)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>write<sp/>additional<sp/>tests<sp/>for<sp/>+=<sp/>*=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Done.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Peter/GitHub_remotes/Winter_UWB_2017/css_343/ass1_Turtle_Program/turtleprogram/turtleprogram/main.cpp"/>
  </compounddef>
</doxygen>
